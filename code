import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from polygon import RESTClient
import logging


# Upload API key
def load_api_key(file_path):

    try:
        with open(file_path, 'r') as file:
            return file.read().strip()

    except Exception as e:

        logging.error(f"Error loading API key: {e}")

        return None


# Make an API request
def api_request(ticker, api_key, from_='2022-01-01', to=datetime.today().date()):

    try:
        client = RESTClient(api_key=api_key)

        aggs = [a for a in client.list_aggs(
            ticker,
            1,
            "day",
            from_,
            to,
            limit=50000,
        )]
        return aggs

    except Exception as e:

        logging.error(f"Error making API request for {ticker}: {e}")

        return None


# Request ticker data
def fetch_data(tickers, api_key):

    try:

        data = pd.DataFrame()

        for ticker in tickers:
            aggs = api_request(ticker, api_key)

            df = pd.DataFrame(aggs)
            df['date'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True)
            df['date'] = df['date'].dt.strftime('%Y-%m-%d')
            df.set_index('date', inplace=True)
            data[f'open{ticker}'] = df['open']
            data[f'close{ticker}'] = df['close']

        return data

    except Exception as e:

        logging.error(f"Error fetching data: {e}")

        return pd.DataFrame()


def calculate_percentage(data):

    try:

        for ticker in tickers:
            data[f'percentage{ticker}'] = (data[f'close{ticker}'] - data[f'open{ticker}']) / data[f'open{ticker}']

        return data

    except Exception as e:

        logging.error(f"Error calculating percentage: {e}")

        return pd.DataFrame()


def calculate_correlation(data, tickers, period=30):

    try:

        corr_data = data.dropna()
        corr_data = corr_data.assign(correlation=np.nan)

        for index in range(period, len(corr_data)):
            price_0 = corr_data[f'percentage{tickers[0]}'].iloc[index - period: index].to_numpy()
            price_1 = corr_data[f'percentage{tickers[1]}'].iloc[index - period: index].to_numpy()
            correlation_value = np.corrcoef(price_0, price_1)[0, 1]
            corr_data.at[corr_data.index[index], 'correlation'] = correlation_value

        return corr_data.dropna()

    except Exception as e:

        logging.error(f"Error calculating correlation: {e}")

        return pd.DataFrame()


if __name__ == '__main__':

    api_key = load_api_key('api_key.txt')  # Securely load API key from a file

    tickers = ['X:BTCUSD', 'I:NDX']

    # Fetching data...
    data = fetch_data(tickers, api_key)

    # Calculate percantage
    calculate_percentage(data)

    # Calculating correlation...
    corr_data = calculate_correlation(data, tickers)

    # Data fetched and saved.
    data.to_csv('data.csv')
    corr_data.to_csv('corr_data.csv')

    # Visualization correlation
    plt.style.use('bmh')

    fig, axs = plt.subplots(figsize=(12, 10))

    num_display_dates = 10
    step = len(corr_data) // num_display_dates

    axs.plot(corr_data.index, corr_data['correlation'])
    axs.set_xticks(corr_data.index[::step])
    axs.set_xticklabels(corr_data.index[::step], rotation=45)

    axs.set_ylabel('Correlation', fontsize=12)
    axs.set_title(f'Correlation between {tickers[0]} and {tickers[1]}', fontsize=14)

    plt.tight_layout()
    plt.show()
